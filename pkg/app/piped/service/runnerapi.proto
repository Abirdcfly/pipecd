// Copyright 2020 The Pipe Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package pipe.piped.service;
option go_package = "github.com/kapetaniosci/pipe/pkg/app/piped/service";

import "validate/validate.proto";
import "pkg/app/piped/model/command.proto";
import "pkg/app/piped/model/event.proto";

service RunnerAPI {
    // Ping is periodically called by runner to report its status to piped.
    rpc Ping(PingRequest) returns (PingResponse) {}
    // RegisterEvents is called by runner to submit an event from executing jobs.
    rpc RegisterEvents(RegisterEventsRequest) returns (RegisterEventsResponse) {}
    // SendStageLog is called by runner to append the log of a specific stage.
    rpc SendStageLog(SendStageLogRequest) returns (SendStageLogResponse) {}
    // ListCommands is called by runner to obtain the commands should be executed.
    // Results are streamed rather than returned at once.
    rpc ListCommands(ListCommandsRequest) returns (stream ListCommandsResponse) {}
}

message PingRequest {
    int64 local_time = 1 [(validate.rules).int64.gt = 0];
    string version = 2;
}

message PingResponse {
}

message RegisterEventsRequest {
    repeated pipe.piped.model.Event events = 1;
}

message RegisterEventsResponse {
}

message SendStageLogRequest {
    string pipeline_id = 1 [(validate.rules).string.min_len = 1];
    string stage_id = 2 [(validate.rules).string.min_len = 1];
}

message SendStageLogResponse {
}

message ListCommandsRequest {
}

message ListCommandsResponse {
    repeated pipe.piped.model.Command commands = 1;
    // If true, all commands must be executed in order.
    bool serial = 2;
}
