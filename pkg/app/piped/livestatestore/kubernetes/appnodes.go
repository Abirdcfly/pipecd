// Copyright 2020 The PipeCD Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package kubernetes

import (
	"sync"
	"time"

	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"

	provider "github.com/kapetaniosci/pipe/pkg/app/piped/cloudprovider/kubernetes"
	"github.com/kapetaniosci/pipe/pkg/model"
)

type appNodes struct {
	appID         string
	managingNodes map[string]node
	dependedNodes map[string]node
	updatedAt     time.Time
	mu            sync.RWMutex
}

type node struct {
	// The unique identifier of the resource generated by Kubernetes.
	uid string
	// The unique idenfitifer of the application this node belongs to.
	appID string
	// The resourceKey of the first added resource into this node.
	firstResourceKey provider.ResourceKey
	// The key to the resource that matching with the originalAPIVersion.
	// This will only be set for managing resources.
	matchResourceKey provider.ResourceKey
	// The map of resources that have a same uid.
	// This always has at least one resource.
	resources map[provider.ResourceKey]*unstructured.Unstructured
}

func (a *appNodes) addManagingResource(uid string, key provider.ResourceKey, obj *unstructured.Unstructured, now time.Time) (model.KubernetesResourceStateEvent, bool) {
	var n node
	originalAPIVersion := obj.GetAnnotations()[provider.LabelOriginalAPIVersion]

	a.mu.Lock()
	defer a.mu.Unlock()

	if cur, ok := a.managingNodes[uid]; ok {
		n = cur
	} else {
		n = node{
			uid:              uid,
			appID:            a.appID,
			firstResourceKey: key,
			resources:        map[provider.ResourceKey]*unstructured.Unstructured{},
		}
	}

	n.resources[key] = obj
	if originalAPIVersion == key.APIVersion {
		n.matchResourceKey = key
	}
	a.managingNodes[uid] = n
	a.updatedAt = now

	return model.KubernetesResourceStateEvent{}, false
}

func (a *appNodes) deleteManagingResource(uid string, key provider.ResourceKey, now time.Time) (model.KubernetesResourceStateEvent, bool) {
	a.mu.Lock()
	defer a.mu.Unlock()

	n, ok := a.managingNodes[uid]
	if !ok {
		return model.KubernetesResourceStateEvent{}, false
	}

	delete(n.resources, key)
	if len(n.resources) == 0 {
		delete(a.managingNodes, uid)
	}

	a.updatedAt = now
	return model.KubernetesResourceStateEvent{}, false
}

func (a *appNodes) addDependedResource(uid string, key provider.ResourceKey, obj *unstructured.Unstructured, now time.Time) (model.KubernetesResourceStateEvent, bool) {
	var n node

	a.mu.Lock()
	defer a.mu.Unlock()

	if cur, ok := a.dependedNodes[uid]; ok {
		n = cur
	} else {
		n = node{
			uid:              uid,
			appID:            a.appID,
			firstResourceKey: key,
			resources:        map[provider.ResourceKey]*unstructured.Unstructured{},
		}
	}

	n.resources[key] = obj
	a.dependedNodes[uid] = n
	a.updatedAt = now

	return model.KubernetesResourceStateEvent{}, false
}

func (a *appNodes) deleteDependedResource(uid string, key provider.ResourceKey, now time.Time) (model.KubernetesResourceStateEvent, bool) {
	a.mu.Lock()
	defer a.mu.Unlock()

	n, ok := a.dependedNodes[uid]
	if !ok {
		return model.KubernetesResourceStateEvent{}, false
	}

	delete(n.resources, key)
	if len(n.resources) == 0 {
		delete(a.dependedNodes, uid)
	}

	a.updatedAt = now
	return model.KubernetesResourceStateEvent{}, false
}

func (a *appNodes) getManagingNodes() map[string]node {
	a.mu.RLock()
	defer a.mu.RUnlock()

	return a.managingNodes
}

func (a *appNodes) getNodes() map[string]node {
	a.mu.RLock()
	defer a.mu.RUnlock()

	nodes := make(map[string]node, len(a.managingNodes)+len(a.dependedNodes))
	for k, n := range a.dependedNodes {
		nodes[k] = n
	}
	for k, n := range a.managingNodes {
		nodes[k] = n
	}
	return nodes
}

func nodeToResource(n node) *model.KubernetesResourceState {
	key := n.firstResourceKey
	if !n.matchResourceKey.IsZero() {
		key = n.matchResourceKey
	}
	return &model.KubernetesResourceState{
		Id:         n.uid,
		Name:       key.Name,
		ApiVersion: key.APIVersion,
		Kind:       key.Kind,
	}
}
