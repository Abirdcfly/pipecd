// Copyright 2020 The PipeCD Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package pipe.api.service.pipedservice;
option go_package = "github.com/kapetaniosci/pipe/pkg/app/api/service/pipedservice";

import "validate/validate.proto";
import "pkg/app/api/service/pipedservice/event.proto";
import "pkg/model/command.proto";
import "pkg/model/application.proto";
import "pkg/model/application_state.proto";
import "pkg/model/deployment.proto";
import "pkg/model/logblock.proto";
import "pkg/model/piped_stats.proto";

service PipedService {
    // Ping is periodically sent by piped to report its status/stats to API.
    // The received stats will be written to the cache immediately.
    // The cache data may be lost anytime so we need a singleton Persister
    // to persist those data into datastore every n minutes.
    rpc Ping(PingRequest) returns (PingResponse) {}

    // ListApplications returns a list of registered applications
    // that should be managed by the requested piped.
    // Disabled applications should not be included in the response.
    // Piped uses this RPC to fetch and sync the application configuration into its local database.
    rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse) {}

    // CreateDeployment creates/triggers a new deployment for an application
    // that is managed by this piped.
    // This will be used by DeploymentTrigger component.
    rpc CreateDeployment(CreateDeploymentRequest) returns (CreateDeploymentResponse) {}

    // ListNotCompletedDeployments returns a list of not completed deployments
    // which are managed by this piped.
    // DeploymentController component uses this RPC to spawns/syncs its local deployment executors.
    rpc ListNotCompletedDeployments(ListNotCompletedDeploymentsRequest) returns (ListNotCompletedDeploymentsResponse) {}

    // SaveStageMetadata used by piped to persist the metadata
    // of a specific stage of a deployment.
    rpc SaveStageMetadata(SaveStageMetadataRequest) returns (SaveStageMetadataResponse) {}

    // ReportStageStatusChanged used by piped to update the status
    // of a specific stage of a deployment.
    rpc ReportStageStatusChanged(ReportStageStatusChangedRequest) returns (ReportStageStatusChangedResponse) {}

    // ReportStageLog is sent by piped to save the log of a pipeline stage.
    rpc ReportStageLog(ReportStageLogRequest) returns (ReportStageLogResponse) {}

    // ReportDeploymentStatusChanged used by piped to update the status
    // of a specific deployment.
    rpc ReportDeploymentStatusChanged(ReportDeploymentStatusChangedRequest) returns (ReportDeploymentStatusChangedResponse) {}

    // ListUnhandledCommands is periodically called by piped to obtain the commands
    // that should be handled.
    // Whenever an user makes an interaction from WebUI (cancel/approve/retry/sync)
    // a new command with a unique identifier will be generated an saved into the datastore.
    // Piped uses this RPC to list all still-not-handled commands to handle them,
    // then report back the result to server.
    // On other side, the web will periodically check the command status and feedback the result to user.
    // In the future, we may need a solution to remove all old-handled commands from datastore for space.
    rpc ListUnhandledCommands(ListUnhandledCommandsRequest) returns (ListUnhandledCommandsResponse) {}

    // ReportCommandHandled is called by piped to mark a specific command as handled.
    // The request payload will contain the handle status as well as any additional result data.
    // The handle result should be updated to both datastore and cache (for reading from web).
    rpc ReportCommandHandled(ReportCommandHandledRequest) returns (ReportCommandHandledResponse) {}

    // ReportApplicationState is periodically sent by piped to refresh the current state of application.
    // This may contain a full tree of application resources for Kubernetes application.
    // The tree data will be written into filestore and the cache inmmediately.
    rpc ReportApplicationState(ReportApplicationStateRequest) returns (ReportApplicationStateResponse) {}

    // ReportAppStateEvents is sent by piped to submit one or multiple events
    // about the changes of application state.
    // Control plane uses the received events to update the state of application-resource-tree.
    // We want to start by a simple solution at this initial stage of development,
    // so the API server just handles as below:
    // - loads the releated application-resource-tree from filestore
    // - checks and builds new state for the application-resource-tree
    // - updates new state into fielstore and cache (cache data is for reading while handling web requests)
    // In the future, we may want to redesign the behavior of this RPC by using pubsub/queue pattern.
    // After receiving the events, all of them will be publish into a queue immediately,
    // and then another Handler service will pick them inorder to apply to build new state.
    // By that way we can control the traffic to the datastore in a better way.
    rpc ReportAppStateEvents(ReportAppStateEventsRequest) returns (ReportAppStateEventsResponse) {}
}

message PingRequest {
    pipe.model.PipedStats piped_stats = 1 [(validate.rules).message.required = true];
}

message PingResponse {
    int64 ping_interval = 1;
}

message ListApplicationsRequest {
}

message ListApplicationsResponse {
    repeated pipe.model.Application applications = 1;
}

message CreateDeploymentRequest {
    pipe.model.Deployment deployment = 1 [(validate.rules).message.required = true];
}

message CreateDeploymentResponse {
}

message ListNotCompletedDeploymentsRequest {
}

message ListNotCompletedDeploymentsResponse {
    repeated pipe.model.Deployment deployments = 1;
}

message SaveStageMetadataRequest {
    string deployment_id = 1 [(validate.rules).string.min_len = 1];
    string stage_id = 2 [(validate.rules).string.min_len = 1];
    bytes metadata = 3;
}

message SaveStageMetadataResponse {
}

message ReportStageStatusChangedRequest {
    string deployment_id = 1 [(validate.rules).string.min_len = 1];
    string stage_id = 2 [(validate.rules).string.min_len = 1];
    pipe.model.StageStatus status = 3 [(validate.rules).enum.defined_only = true];
    // The human-readable description why the stage is at current status.
    string status_description = 4;
    int32 retried_count = 5;
    int64 completed_at = 13 [(validate.rules).int64.gt = 0];
}

message ReportStageStatusChangedResponse {
}

message ReportStageLogRequest {
    string deployment_id = 1 [(validate.rules).string.min_len = 1];
    string stage_id = 2 [(validate.rules).string.min_len = 1];
    repeated pipe.model.LogBlock blocks = 3;
    bool completed = 4;
    int64 total_block_count = 5;
}

message ReportStageLogResponse {
}

message ReportDeploymentStatusChangedRequest {
    string deployment_id = 1 [(validate.rules).string.min_len = 1];
    // The status of deployment.
    pipe.model.DeploymentStatus status = 2 [(validate.rules).enum.defined_only = true];
    // The human-readable description why the deployment is at current status.
    string status_description = 3;
    // The completed statuses of all stages.
    map<string,model.StageStatus> stage_statuses = 4;
    // The completion time of deployment.
    int64 completed_at = 13 [(validate.rules).int64.gt = 0];
}

message ReportDeploymentStatusChangedResponse {
}

message ListUnhandledCommandsRequest {
}

message ListUnhandledCommandsResponse {
    repeated pipe.model.Command commands = 1;
}

message ReportCommandHandledRequest {
    string command_id = 1 [(validate.rules).string.min_len = 1];
    pipe.model.CommandStatus status = 2 [(validate.rules).enum.defined_only = true];
    map<string,string> metadata = 3;
    int64 handled_at = 4 [(validate.rules).int64.gt = 0];
}

message ReportCommandHandledResponse {
}

message ReportApplicationStateRequest {
    pipe.model.ApplicationState state = 1 [(validate.rules).message.required = true];
}

message ReportApplicationStateResponse {
    int64 latest_timestamp = 1 [(validate.rules).int64.gt = 0];
}

message ReportAppStateEventsRequest {
    repeated AppStateEvent events = 1;
}

message ReportAppStateEventsResponse {
    repeated string failed_ids = 1;
}
