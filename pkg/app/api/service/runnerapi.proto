// Copyright 2020 The Pipe Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package pipe.api.service;
option go_package = "github.com/kapetaniosci/pipe/pkg/app/api/service";

import "validate/validate.proto";
import "pkg/app/api/model/pipeline_command.proto";
import "pkg/app/api/model/event.proto";

service RunnerAPI {
    // Ping is periodically called by runner to report its status/stats to API.
    rpc Ping(PingRequest) returns (PingResponse) {}
    // ListApplicationsByRunner returns a list of registered applications
    // that should be managed by a given runner.
    rpc ListApplicationsByRunner(ListApplicationsByRunnerRequest) returns (ListApplicationsByRunnerResponse) {}
    // RegisterEvents is called by runner to submit one or multiple events
    // about executing pipelines and application resources.
    rpc RegisterEvents(RegisterEventsRequest) returns (RegisterEventsResponse) {}
    // SendStageLiveLog makes a client-stream to send the live-log of a stage.
    rpc SendStageLiveLog(stream SendStageLiveLogRequest) returns (SendStageLiveLogResponse) {}
    // SendStageCompleteLog is called by runner to save the complete log
    // of a specific stage after its completion.
    rpc SendStageCompleteLog(SendStageCompleteLogRequest) returns (SendStageCompleteLogResponse) {}
    // GetCommands is periodically called by runner to obtain the commands
    // that should be handled.
    rpc GetCommands(GetCommandsRequest) returns (GetCommandsResponse) {}
    // ReportPipelineStarted used by runner to send initial state
    // of the pipeline that has just been started.
    rpc ReportPipelineStarted(ReportPipelineStartedRequest) returns (ReportPipelineStartedResponse) {}
    // ReportPipelineCompleted used by runner to send the final state
    // of the pipeline that has just been completed.
    rpc ReportPipelineCompleted(ReportPipelineCompletedRequest) returns (ReportPipelineCompletedResponse) {}
    // ReportApplicationResourceTree periodically sends the full tree of application resources.
    rpc ReportApplicationResourceTree(ReportApplicationResourceTreeRequest) returns (ReportApplicationResourceTreeResponse) {}
}

message PingRequest {
    // Local time of runner.
    int64 timestamp = 1 [(validate.rules).int64.gt = 0];
    // The version of runner.
    string version = 2;
    // Number of pipelines are running currently.
    int32 running_pipelines = 3;
    // Total number of api requests to k8s from the previous ping.
    int64 k8s_api_requests = 4;
}

message PingResponse {
    int64 ping_interval = 1;
}

message ListApplicationsByRunnerRequest {
}

message ListApplicationsByRunnerResponse {
}

message RegisterEventsRequest {
    repeated pipe.api.model.Event events = 1;
}

message RegisterEventsResponse {
}

message SendStageLiveLogRequest {
}

message SendStageLiveLogResponse {
}

message SendStageCompleteLogRequest {
    string pipeline_id = 1 [(validate.rules).string.min_len = 1];
    string stage_id = 2 [(validate.rules).string.min_len = 1];
}

message SendStageCompleteLogResponse {
}

message GetCommandsRequest {
    repeated string pipelines = 1;
}

message GetCommandsResponse {
    repeated pipe.api.model.PipelineCommand commands = 1;
}

message ReportPipelineStartedRequest {
}

message ReportPipelineStartedResponse {
}

message ReportPipelineCompletedRequest {
    string pipeline_id = 1 [(validate.rules).string.min_len = 1];
}

message ReportPipelineCompletedResponse {
}

message ReportApplicationResourceTreeRequest {
    string application_id = 1 [(validate.rules).string.min_len = 1];
    int64 timestamp = 2 [(validate.rules).int64.gt = 0];
}

message ReportApplicationResourceTreeResponse {
}
