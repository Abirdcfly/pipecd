// Copyright 2020 The Pipe Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package pipe.api.service;
option go_package = "github.com/kapetaniosci/pipe/pkg/app/api/service";

import "validate/validate.proto";
import "pkg/app/api/model/pipeline_command.proto";
import "pkg/app/api/model/event.proto";

service RunnerAPI {
    // Ping is periodically called by runner to report its status to api.
    rpc Ping(PingRequest) returns (PingResponse) {}

    // RegisterEvents is called by runner to submit an event from executing jobs.
    rpc RegisterEvents(RegisterEventsRequest) returns (RegisterEventsResponse) {}
    // SendStageFullLog is called by runner to save the full log of a specific stage.
    rpc SendStageFullLog(SendStageFullLogRequest) returns (SendStageFullLogResponse) {}
    // ListPipelineCommands is called by runner to obtain the commands
    // that should be executed for the required pipelines.
    rpc ListPipelineCommands(ListPipelineCommandsRequest) returns (ListPipelineCommandsResponse) {}
    // PipelineCompleted marks the pipeline has just been completed and sends its full state.
    rpc PipelineCompleted(PipelineCompletedRequest) returns (PipelineCompletedResponse) {}
    // UpdateApplicationResourceTree sends the full tree of application resources.
    rpc UpdateApplicationResourceTree(UpdateApplicationResourceTreeRequest) returns (UpdateApplicationResourceTreeResponse) {}
}

message PingRequest {
    int64 local_time = 1 [(validate.rules).int64.gt = 0];
    string version = 2;
}

message PingResponse {
}

message RegisterEventsRequest {
    repeated pipe.api.model.Event events = 1;
}

message RegisterEventsResponse {
}

message SendStageFullLogRequest {
    string pipeline_id = 1 [(validate.rules).string.min_len = 1];
    string stage_id = 2 [(validate.rules).string.min_len = 1];
}

message SendStageFullLogResponse {
}

message ListPipelineCommandsRequest {
    repeated string pipelines = 1;
}

message ListPipelineCommandsResponse {
    repeated pipe.api.model.PipelineCommand commands = 1;
}

message PipelineCompletedRequest {
    string pipeline_id = 1 [(validate.rules).string.min_len = 1];
}

message PipelineCompletedResponse {
}

message UpdateApplicationResourceTreeRequest {
    string application_id = 1 [(validate.rules).string.min_len = 1];
    int64 timestamp = 2 [(validate.rules).int64.gt = 0];
}

message UpdateApplicationResourceTreeResponse {
}
