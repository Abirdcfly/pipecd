// Copyright 2020 The PipeCD Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package pipe.model;
option go_package = "github.com/pipe-cd/pipe/pkg/model";

import "validate/validate.proto";

enum CommandType {
    COMMAND_APPLICATION = 0;
    COMMAND_DEPLOYMENT = 1;
    COMMAND_STAGE = 2;
    COMMAND_GIT_REPO_HOOK = 3;
}

enum CommandStatus {
    COMMAND_NOT_HANDLED_YET = 0;
    COMMAND_SUCCEEDED = 1;
    COMMAND_FAILED = 2;
    COMMAND_TIMEOUT = 3;
}

message Command {
    // The generated unique identifier.
    string id = 1 [(validate.rules).string.min_len = 1];
    string piped_id = 2 [(validate.rules).string.min_len = 1];
    string application_id = 3;
    string deployment_id = 4;
    string stage_id = 5;
    CommandType type = 6 [(validate.rules).enum.defined_only = true];
    // Who triggered the command.
    string commander = 7;

    CommandStatus status = 10;
    map<string,string> metadata = 11;
    int64 handled_at = 12 [(validate.rules).int64.gt = 0];

    int64 created_at = 14 [(validate.rules).int64.gt = 0];
    int64 updated_at = 15 [(validate.rules).int64.gt = 0];

    // Application Command.
    message SyncApplication {
        string application_id = 1 [(validate.rules).string.min_len = 1];
    }

    message UpdateApplicationConfig {
        string application_id = 1 [(validate.rules).string.min_len = 1];
        string config_path = 2 [(validate.rules).string.min_len = 1];
        string config = 3 [(validate.rules).string.min_len = 1];
    }

    // Deployment Command.
    message CancelDeployment {
        string deployment_id = 1 [(validate.rules).string.min_len = 1];
        bool without_rollback = 2;
    }

    // Stage Command.
    message ApproveStage {
        string deployment_id = 1 [(validate.rules).string.min_len = 1];
        string stage_id = 2 [(validate.rules).string.min_len = 1];
    }

    // Repo Hook Event Command.
    message HandlePullRequestEvent {
        string repo = 1 [(validate.rules).string.min_len = 1];
        string action = 2 [(validate.rules).string.min_len = 1];
    }

    oneof inner {
        SyncApplication sync_application = 100;
        UpdateApplicationConfig update_application_config = 101;

        CancelDeployment cancel_deployment = 200;

        ApproveStage approve_stage = 300;

        HandlePullRequestEvent handle_pull_request_event = 400;
    }
}
