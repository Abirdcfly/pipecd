// Copyright 2020 The PipeCD Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package pipe.model;
option go_package = "github.com/kapetaniosci/pipe/pkg/model";

import "validate/validate.proto";
import "pkg/model/application.proto";

enum DeploymentStatus {
    DEPLOYMENT_TRIGGERED = 0;
    DEPLOYMENT_PENDING = 1;
    DEPLOYMENT_RUNNING = 2;
    DEPLOYMENT_SUCCESS = 3;
    DEPLOYMENT_FAILURE = 4;
    DEPLOYMENT_CANCELLED = 5;
}

enum StageStatus {
    STAGE_NOT_STARTED_YET = 0;
    STAGE_RUNNING = 1;
    STAGE_SUCCESS = 2;
    STAGE_FAILURE = 3;
    STAGE_CANCELLED = 4;
}

// Deployment represents a particular deployment for an application.
// When a new deployment can be created:
// - New commit was added and it mades a change on application configuration.
// - User clicked on Sync button at application web page.
// - Promoted from another enviroment.
message Deployment {
    // The generated unique identifier.
    string id = 1 [(validate.rules).string.min_len = 1];
    string application_id = 2 [(validate.rules).string.min_len = 1];
    string env_id = 3 [(validate.rules).string.min_len = 1];
    string piped_id = 4 [(validate.rules).string.min_len = 1];
    string project_id = 5 [(validate.rules).string.min_len = 1];
    ApplicationKind kind = 6 [(validate.rules).enum.defined_only = true];

    DeploymentTrigger trigger = 7 [(validate.rules).message.required = true];
    ApplicationGitPath git_path = 8 [(validate.rules).message.required = true];
    // Simple description about what this deployment does.
    // e.g. Scale from 10 to 100 replicas.
    // e.g. Update image from v1.5.0 to v1.6.0.
    string description = 9;
    DeploymentStatus status = 10 [(validate.rules).enum.defined_only = true];
    // The human-readable description why the deployment is at current status.
    string status_description = 11;
    repeated PipelineStage stages = 12;
    map<string,string> metadata = 13;

    int64 completed_at = 100 [(validate.rules).int64.gte = 0];
    int64 created_at = 101 [(validate.rules).int64.gt = 0];
    int64 updated_at = 102 [(validate.rules).int64.gt = 0];
}

message DeploymentTrigger {
    Commit commit = 1 [(validate.rules).message.required = true];
    // Who triggered this deployment.
    // This may be different to the commit.author when the deployment is trigger from webUI.
    string user = 2 [(validate.rules).string.min_len = 1];
    int64 timestamp = 3 [(validate.rules).int64.gt = 0];
}

message PipelineStage {
    string id = 1 [(validate.rules).string.min_len = 1];
    string name = 2 [(validate.rules).string.min_len = 1];
    string desc = 3;
    // Stage index from the stage list in configuration.
    int32 index = 4;
    repeated string requires = 5;
    StageStatus status = 6 [(validate.rules).enum.defined_only = true];
    string json_metadata = 7;
    int32 retried_count = 8;
    int64 completed_at = 13 [(validate.rules).int64.gte = 0];
    int64 created_at = 14 [(validate.rules).int64.gt = 0];
    int64 updated_at = 15 [(validate.rules).int64.gt = 0];
}

message Commit {
    string hash = 1 [(validate.rules).string.min_len = 1];
    string message = 2 [(validate.rules).string.min_len = 1];
    string author = 3 [(validate.rules).string.min_len = 1];
    string branch = 4 [(validate.rules).string.min_len = 1];
    int64 pull_request = 5;
    int64 created_at = 14 [(validate.rules).int64.gt = 0];
}