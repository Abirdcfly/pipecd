// Copyright 2020 The Dianomi Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package dianomi.config;
option go_package = "github.com/nghialv/dianomi/pkg/config";

import "validate/validate.proto";

enum Kind {
    K8sApp = 0;
    Terraform = 1;
}

enum StepName {
    // Common steps.
    APPROVAL = 0;
    VERIFICATION = 1;
    // NOTIFICATION = 2; This should be configured via Web GUI.

    // Kubenetes steps.
    K8S_APPLY = 100;
    K8S_CANARY_OUT = 101;
    K8S_CANARY_IN = 102;
    K8S_BLUE_GREEN_OUT = 103;
    K8S_BLUE_GREEN_ROUTE_UPDATE = 104;
    K8S_BLUE_GREEN_IN = 105;

    // Terraform steps.
    TERRAFORM_PLAN = 200;
    TERRAFORM_APPLY = 201;

    // CloudRun steps.
    // Lambda steps.
}

message Config {
    string version = 1 [(validate.rules).string = {in: [
        "v1"
    ]}];
    string kind = 2 [(validate.rules).string = {in: [
        "K8sApp",
        "Terraform"
    ]}];
    string name = 3 [(validate.rules).string.min_len = 1];
    repeated Step steps = 4 [(validate.rules).repeated.min_items = 1];
    KubectlConfig kubectl = 5;
    KustomizeConfig kustomize = 6;
    HelmConfig helm = 7;
    TerraformConfig terraform = 8;
}

message Step {
    string name = 1 [(validate.rules).string = {in: [
        "APPROVAL",
        "VERIFICATION",
        "K8S_APPLY",
        "K8S_CANARY_OUT",
        "K8S_CANARY_IN",
        "K8S_BLUE_GREEN_OUT",
        "K8S_BLUE_GREEN_ROUTE_UPDATE",
        "K8S_BLUE_GREEN_IN",
        "TERRAFORM_PLAN",
        "TERRAFORM_APPLY"
    ]}];
    string desc = 2;
    string timeout = 3;
    string wait = 4;
}

message ApprovalStep {
    repeated string approvers = 1;
}

message VerificationStep {
    string interval = 1;
}

message K8sApplyStep {
}

message K8sCanaryOutStep {
    // Percentage of canary pods after scale out.
    // Default is 1 pod.
    int32 weight = 1;
}

message K8sCanaryInStep {
    // Percentage of canary pods after scale in.
    // Default is 0.
    int32 weight = 1;
}

message K8sBlueGreenOutStep {
}

message K8sBlueGreenRouteUpdate {
}

message K8sBlueGreenInStep {
}

message TerraformPlan {
}

message TerraformApply {
}

message KubectlConfig {
    string version = 1;
}

message KustomizeConfig {
}

message HelmConfig {
    string version = 1;
}

message TerraformConfig {
    string version = 1;
    repeated string dependencies = 2;
}

// Verification
// - Prometheus
// - Datadog
// - Stackdriver (metrics and logging)
// - CloudWatch
// - Http
